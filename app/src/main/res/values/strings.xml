<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">QuickComposeTutorial</string>
    <string name="title_activity_compose_example">ComposeExampleActivity</string>

    <string name="example_1">
#1 Box\n
1. Container 역할\n
2. 배경색, padding, child 위치 설정\n
    </string>

    <string name="example_2" tools:ignore="ExtraTranslation">
#2 Column, Row\n
1. Column: 세로로 View를 순서대로 배치\n
2. Row: 가로로 View를 순서대로 배치\n
3. Scroll을 가능하게 하려면\n
   horizontalScroll이나 verticalScroll에\n
   rememberScrollState()를 넘겨주어야 한다.

    </string>

    <string name="example_3" tools:ignore="ExtraTranslation">
#3 ConstraintLayout\n
1. ConstraintLayout:\n기존의 ConstraintLayout과 유사함\n
2. app Gradle에 라이브러리 추가해야 함.

    </string>
    <string name="example_4" tools:ignore="ExtraTranslation">
#4 BoxWithConstraints \n
1. Flutter의 layout과 유사함\n
2. 부모 Size 정보를 가져와 반응형으로 처리가능.

    </string>

    <string name="example_5" tools:ignore="ExtraTranslation">
#5 Shape \n
1. Modifier의 clip()메소드 파라메터로 넘김\n
2. CircleShape, RoundedCornerShape 주로 사용됨

    </string>

    <string name="example_6" tools:ignore="ExtraTranslation">
#6 Text \n
1. 문자열 표시를 위한 기본 View\n

    </string>

    <string name="example_7" tools:ignore="ExtraTranslation">
#7 Button, Image \n
1. Button과 Image를 사용하는 기본 View\n

    </string>

    <string name="example_8" tools:ignore="ExtraTranslation">
#8 StateManagement \n
1. Jetpack Compose는 선언형 프로그래밍이다\n
2. Flutter와 같이 Stateless, Stateful이 존재한다\n
3. 변수를 rememberOO{mutableStateOf()}로 관리하면 Stateful이다\n
4. Stateful이 많아지면 속도저하가 발생한다\n
5. 되도록 state hoisting을 사용한다.


    </string>

    <string name="example_9" tools:ignore="ExtraTranslation">
#9 TextField \n
1. 문자입력을 위한 View\n

    </string>

    <string name="title_activity_compose_example_row_col_main">ComposeExampleRowColMainActivity
    </string>


</resources>